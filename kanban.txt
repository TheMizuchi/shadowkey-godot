TO DO OR MISSING
- migrate this to a proper task-tracking platform
- player attributes
- creatures attacking
- heal spell
- equipped items effecting player attributes (armor reducing taken damage)
- interacting with NPCs
- quest logic
- coin count
- merchant shop
- make doors work
- ranged attacks for opponents
- shadowkeys
- shadow gates
- death floor in caves
- ability to drop items (create bag container with dropped items)
- water shader
- collision shapes for props
- hit success dice roll
- gameplay settings (allow player to enable/disable stuff like diceroll)
- hide outstanding parts of environment meshes by subtracting meshes
- optional fog volume on daylight maps to simulate limited draw distance
- save region state and load it once player returns to it
- saving and loading game status
- sound effects
- blood sprite travel curve
- figure out why player gets stuck near pillars
- why TF does player get stuck on the broken pillar in Azra town?
- combine items from "drop session" into a single bag
- understand consumable effects by reading items/*.s files
- delfan's Hideout is also dark, just like Azra
  are all interiors dark?
- add skyboxes
- set up appropriate worldenvironment for each map
- pause game when in amy menu
- don't play spellcast animation when not enough magicka
- implement aggro disengage (periodically check distance to target)
- holding down M1 should repeat use of equipped item
- handle using consumable items
- seperate equipped consumables list from equippped weapon / spell list
- figure out better method for spawning and aiming projectiles
  currently looking at floor causes anchor to clip into player body
- implement debug menu
  same functions as Shadowkey cheat menu and other useful functions
- figure out proper data structure for game items
  passing around arrays is horrible idea that should not be done
  ideally this would be enumerated like Weapons.IRON_DAGGER
  but that is just int. How do we then map that to item data?
  dict with enum as key is same as we are doing right now
  will we really have to resort to classes or nodes?
  just for few bytes of data?
- if you approach character from the front or from the side, then
  they slowly turn towards you. But if you approach from their back,
  then they turn quickly
- randomise frame at which idle animation starts
  so that all entities will not play idle animation in sync
- rename all KeyAction_NNN animation names to just KeyAction
- horrible amounts of repeating stuff in character scenes
  think about how to recycle harder
- figure out more optimal way of importing dialogue text
- fix plant textures (three-green-lines plant in GhostPass)
- do Blender wizardry to convert ShapeKey animations into a single
  file with multiple vertex animations
- figoure out how to make NPCs stop doing 360s whenever player moves from
  +axis to -axis

THINK ABOUT
- cutscenes / story texts
- it is possible to remove items from the consumable / equip list :O
  why? does it make sense to implement that?
- blaze projectile casts light
  but it does not really matter because draw distance

IN PROGRESS
- successful hit indication (blood sprite)
- inventory system
- equipping items
- actor animations
- get all the text from the game

DONE
- successful hit indication (red mesh override)
- stat regen over time
- all weapon animations
- actions reducing fatigue (jump)
- projectile weapons (bows, crossbows, throwing knives)
- implement walking on stairs logic
- lighting is messed up if map is exported from map viewer
  not sure if Godot is handling given data as intended or not
  https://github.com/godotengine/godot/issues/83667
  if gLTF is imported into Blender, root node removed, meshes shifted
  by x64 y64 z15 then exported back into gLTF and into Godot, then
  lighting works fine
- list of all items in Shadowkey and their stats
- picking up items
- player stats (health, magicka, fatigue)
- player taking damage
- remove actor collision when health is depleted
- loot drops
- fall damage
- auto-equip picked up item if nothing is currently equipped
- fix negative fatigue

IN THE FUTURE, AFTER EVERYTHING ELSE IS DONE
- third-person view
- multiplayer
- upscale sprites
- sort out duplicated meshes. 
  Currently each instance of a mesh in the level is a different mesh
  this is why levels take so much space on disk
- apparently Shadowkey developers wanted NPCs to walk to their destinations
  instead of just teleporting to them (ratsherb.s:85)
  maybe implement that
- port to Android
  touchscreen controls and fitting interface and such stuff

